#!/bin/sh
# this is the common settings for the various scripts here

echo "Initialising shell variables"

export TERM=linux
export HOME=/root
export HOSTNAME=debian

if [ $# -lt 1 ]; then
    echo "incorrect number of arguments, should be between 1 and 7:"
    echo "    $0 app_bin [sdcard] [imagefile] [mnt] [release] [mirror] [imagesize]"
fi

# use the included utilities first
app_bin=$1
export PATH=$app_bin:/usr/sbin:/usr/bin:/sbin:/bin:/system/sbin:/system/bin:/system/xbin

if [ -z $sdcard ]; then
    sdcard=$2
fi
if [ -z $imagefile ]; then
    imagefile=$3
fi
if [ -z $mnt ]; then
    mnt=$4
fi
if [ -z $release ]; then
    release=$5
fi    
if [ -z $mirror ]; then
    mirror=$6
fi    
if [ -z $imagesize ]; then
    imagesize=$7
fi    

test -d $app_bin || echo "app_bin: '$app_bin' not a directory"
test -d $sdcard || echo "sdcard: '$sdcard' not a directory"
test -z $imagefile && echo "imagefile: '$imagefile' is empty"
test -z $mnt && echo "mnt: '$mnt' is empty"

busybox_path="$app_bin"
busybox=$busybox_path/busybox

fsck_chroot=`dirname $app_bin`/fsck-chroot

sha1file=`dirname $app_bin`/`basename $imagefile.sha1`

# keep all files private to this app
umask 077

make_root_symlinks () {
    wd=`pwd`
    cd /
    mount -oremount,rw rootfs /
    for x in \
        bin boot home media opt selinux srv usr var tmp
    do
        ln -s $mnt/$x /$x
    done
    mount -oremount,ro rootfs /
    cd "$wd"
}

remove_root_symlinks () {
    cd /
    mount -oremount,rw rootfs /
    for x in \
        bin boot home media opt selinux srv usr var tmp
    do
        rm /$x
    done
    mount -oremount,ro rootfs /
}

find_mounted_loopdev () {
    $app_bin/sed -n "s|^\(/dev/.*loop[0-9][0-9]*\) $mnt .*|\1|p" /proc/mounts
}

find_free_loopdev () {
    # on Android 'losetup -f' doesn't reliably return a device that will
    # actually work, so instead we query the existing loop devices to see if
    # anything is attached, and return the first one found that has nothing
    # attached
    for loopdev in `$app_bin/ls -1 /dev/block/loop*`; do
        if  ! `$app_bin/losetup $loopdev > /dev/null 2>&1`; then
            echo $loopdev
            return
        fi
    done
    # if the above doesn't succeed, ask the system as a fallback
    echo `$app_bin/losetup -f`
}

find_attached_loopdev () {
    for loopdev in `$app_bin/ls -1 /dev/block/loop*`; do
        if `$app_bin/losetup $loopdev 2>&1 | grep -q $imagefile`; then
            echo $loopdev
            return
        fi
    done
}

find_loopdev () {
    loopdev=`find_attached_loopdev`
    if [ -z $loopdev ]; then
        echo `find_free_loopdev`
    else
        echo $loopdev
    fi
}

loopdev=`find_loopdev`


find_best_filesystem () {
    $app_bin/grep 'ext[234]' /proc/filesystems | $app_bin/sort | $app_bin/tail -1
}


# We include Debian's e2fsck.static, which needs to check /etc/mtab to make
# sure the filesystem being check is not currently mounted. on Android, /etc
# is actually /system/etc, so in order to avoid modifying /system, we setup a
# special minimal chroot just for running e2fsck.static

create_e2fsck_chroot () {
    echo "Setting up chroot for e2fsck.static"
    mkdir -p $fsck_chroot/`dirname $imagefile`
    mkdir $fsck_chroot/app_bin
    mkdir $fsck_chroot/dev
    mkdir $fsck_chroot/etc
    mkdir $fsck_chroot/proc
    ln -s /proc/mounts $fsck_chroot/etc/mtab
}
