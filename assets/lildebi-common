#!/bin/sh
# this is the common settings for the various scripts here

echo "----------------------------------------"

export TERM=linux
export HOME=/root
export HOSTNAME=debian

if [ $# -lt 1 ]; then
    echo "incorrect number of arguments, should be between 1 and 7:"
    echo "    $0 app_bin [sdcard] [imagefile] [mnt] [release] [mirror] [imagesize]"
fi

# use the included utilities first
app_bin=$1
export PATH=$app_bin:/usr/sbin:/usr/bin:/sbin:/bin:/system/sbin:/system/bin:/system/xbin

echo `basename $0`

if [ -z $sdcard ]; then
    sdcard=$2
fi
if [ -z $imagefile ]; then
    imagefile=$3
fi
if [ -z $mnt ]; then
    mnt=$4
fi
if [ -z $release ]; then
    release=$5
fi    
if [ -z $mirror ]; then
    mirror=$6
fi    
if [ -z $imagesize ]; then
    imagesize=$7
fi    

test -d $app_bin || echo "app_bin: '$app_bin' not a directory"
test -d $sdcard || echo "sdcard: '$sdcard' not a directory"
test -z $imagefile && echo "imagefile: '$imagefile' is empty"
test -z $mnt && echo "mnt: '$mnt' is empty"

busybox_path="$app_bin"
busybox=$busybox_path/busybox

fsck_chroot=`dirname $app_bin`/fsck-chroot

sha1file=`dirname $app_bin`/`basename $imagefile.sha1`

# keep all files private to this app
umask 077

make_root_symlinks () {
    wd=`pwd`
    cd /
    mount -oremount,rw rootfs /
    for x in \
        bin boot home media opt selinux srv usr var tmp
    do
        ln -s $mnt/$x /$x
    done
    mount -oremount,ro rootfs /
    cd "$wd"
}

remove_root_symlinks () {
    cd /
    mount -oremount,rw rootfs /
    for x in \
        bin boot home media opt selinux srv usr var tmp
    do
        rm /$x
    done
    mount -oremount,ro rootfs /
}

find_mounted_loopdev () {
    $app_bin/sed -n "s|^\(/dev/.*loop[0-9][0-9]*\) $mnt .*|\1|p" /proc/mounts
}

find_free_loopdev () {
    # on Android 'losetup -f' doesn't reliably return a device that will
    # actually work, so instead we query the existing loop devices to see if
    # anything is attached, and return the first one found that has nothing
    # attached
    for loopdev in `$app_bin/ls -1 /dev/block/loop*`; do
        if  ! `$app_bin/losetup $loopdev > /dev/null 2>&1`; then
            echo $loopdev
            return
        fi
    done
    # if the above doesn't succeed, ask the system as a fallback
    echo `$app_bin/losetup -f`
}

find_attached_loopdev () {
    for loopdev in `$app_bin/ls -1 /dev/block/loop*`; do
        if `$app_bin/losetup $loopdev 2>&1 | grep -q $imagefile`; then
            echo $loopdev
            return
        fi
    done
}

find_loopdev () {
    loopdev=`find_attached_loopdev`
    if [ -z $loopdev ]; then
        echo `find_free_loopdev`
    else
        echo $loopdev
    fi
}

loopdev=`find_loopdev`


find_best_filesystem () {
    $app_bin/grep 'ext[234]' /proc/filesystems | $app_bin/sort | $app_bin/tail -1
}

#------------------------------------------------------------------------------#
# tricks to get a working fsck

# We include Debian's e2fsck.static, which needs to check /etc/mtab to make
# sure the filesystem being check is not currently mounted. on Android, /etc
# is actually /system/etc, so in order to avoid modifying /system, we setup a
# special minimal chroot just for running e2fsck.static

test_or_create_dir () {
    test -e $1 || mkdir -p $1
}

create_e2fsck_chroot () {
    echo "Setting up chroot for e2fsck.static"
    test_or_create_dir $fsck_chroot
    test_or_create_dir $fsck_chroot/`dirname $imagefile`
    test_or_create_dir $fsck_chroot/app_bin
    test_or_create_dir $fsck_chroot/dev
    test_or_create_dir $fsck_chroot/etc
    test_or_create_dir $fsck_chroot/proc
    test -e $fsck_chroot/etc/mtab || \
        ln -s /proc/mounts $fsck_chroot/etc/mtab
}

find_and_run_fsck () {
    if [ -z $1 ]; then
        fsck_flags="-pv"
    else
        fsck_flags=$1
    fi
# use offical fsck if it exists, other use included one if it exists
    if [ -x /system/bin/e2fsck ]; then
        fsck=/system/bin/e2fsck
        echo "> $fsck $fsck_flags $imagefile"
        $fsck $fsck_flags $imagefile
        fsck_return=$?
    elif [ -x $app_bin/e2fsck.static ]; then
        fsck=$app_bin/e2fsck.static
    # Debian's e2fsck.static needs to check /etc/mtab to make sure the
    # filesystem being check is not currently mounted. on Android, /etc is
    # actually /system/etc, so in order to avoid modifying /system, we run
    # e2fsck.static in a special minimal chroot.
        create_e2fsck_chroot
        imagedir=`dirname $imagefile`
        mount -o bind $app_bin $fsck_chroot/app_bin
        mount -o bind /dev $fsck_chroot/dev
        mount -o bind /proc $fsck_chroot/proc
        mount -o bind $imagedir $fsck_chroot/$imagedir
        echo "> $fsck $fsck_flags $imagefile"
        chroot $fsck_chroot /app_bin/`basename $fsck` $fsck_flags $imagefile
        fsck_return=$?
        umount $fsck_chroot/app_bin
        umount $fsck_chroot/dev
        umount $fsck_chroot/proc
        umount $fsck_chroot/$imagedir
    else
        echo "NO fsck FOUND, SKIPPING DISK CHECK!"
        fsck_return=0
    fi

    test $fsck_return -lt 4 || exit $fsck_return
}
